//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chatgrpc/chatgrpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate HelloGrpc_HelloGrpcClient, then call methods of this protocol to make API calls.
internal protocol HelloGrpc_HelloGrpcClientProtocol: GRPCClient {
  func greetServer(
    _ request: HelloGrpc_GreetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloGrpc_GreetRequest, HelloGrpc_GreetMessage>

  func addRoom(
    _ request: HelloGrpc_RoomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloGrpc_RoomRequest, HelloGrpc_RoomInfo>

  func getRoomInfo(
    _ request: HelloGrpc_RoomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloGrpc_RoomRequest, HelloGrpc_RoomInfo>

  func getRooms(
    _ request: HelloGrpc_Null,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloGrpc_Null, HelloGrpc_RoomList>

  func sendMessage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HelloGrpc_SendRequest, HelloGrpc_SendResult>

  func getMessages(
    _ request: HelloGrpc_MessagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (HelloGrpc_Message) -> Void
  ) -> ServerStreamingCall<HelloGrpc_MessagesRequest, HelloGrpc_Message>

  func sendImage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HelloGrpc_SendImageRequest, HelloGrpc_SendResult>

  func getImage(
    _ request: HelloGrpc_ImagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (HelloGrpc_Image) -> Void
  ) -> ServerStreamingCall<HelloGrpc_ImagesRequest, HelloGrpc_Image>

}

extension HelloGrpc_HelloGrpcClientProtocol {

  /// Sends a greeting
  ///
  /// - Parameters:
  ///   - request: Request to send to GreetServer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func greetServer(
    _ request: HelloGrpc_GreetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloGrpc_GreetRequest, HelloGrpc_GreetMessage> {
    return self.makeUnaryCall(
      path: "/HelloGrpc.HelloGrpc/GreetServer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// チャットルーム追加
  ///
  /// - Parameters:
  ///   - request: Request to send to AddRoom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addRoom(
    _ request: HelloGrpc_RoomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloGrpc_RoomRequest, HelloGrpc_RoomInfo> {
    return self.makeUnaryCall(
      path: "/HelloGrpc.HelloGrpc/AddRoom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// チャットルーム情報取得
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRoomInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRoomInfo(
    _ request: HelloGrpc_RoomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloGrpc_RoomRequest, HelloGrpc_RoomInfo> {
    return self.makeUnaryCall(
      path: "/HelloGrpc.HelloGrpc/GetRoomInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// チャットルーム一覧取得
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRooms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRooms(
    _ request: HelloGrpc_Null,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloGrpc_Null, HelloGrpc_RoomList> {
    return self.makeUnaryCall(
      path: "/HelloGrpc.HelloGrpc/GetRooms",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Client-side streamingを用いてメッセージを交換する
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func sendMessage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HelloGrpc_SendRequest, HelloGrpc_SendResult> {
    return self.makeClientStreamingCall(
      path: "/HelloGrpc.HelloGrpc/SendMessage",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server-side streamingを用いてメッセージを交換する
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getMessages(
    _ request: HelloGrpc_MessagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (HelloGrpc_Message) -> Void
  ) -> ServerStreamingCall<HelloGrpc_MessagesRequest, HelloGrpc_Message> {
    return self.makeServerStreamingCall(
      path: "/HelloGrpc.HelloGrpc/GetMessages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Client streaming call to SendImage
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func sendImage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HelloGrpc_SendImageRequest, HelloGrpc_SendResult> {
    return self.makeClientStreamingCall(
      path: "/HelloGrpc.HelloGrpc/SendImage",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to GetImage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetImage.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getImage(
    _ request: HelloGrpc_ImagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (HelloGrpc_Image) -> Void
  ) -> ServerStreamingCall<HelloGrpc_ImagesRequest, HelloGrpc_Image> {
    return self.makeServerStreamingCall(
      path: "/HelloGrpc.HelloGrpc/GetImage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

internal final class HelloGrpc_HelloGrpcClient: HelloGrpc_HelloGrpcClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the HelloGrpc.HelloGrpc service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol HelloGrpc_HelloGrpcProvider: CallHandlerProvider {
  /// Sends a greeting
  func greetServer(request: HelloGrpc_GreetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<HelloGrpc_GreetMessage>
  /// チャットルーム追加
  func addRoom(request: HelloGrpc_RoomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<HelloGrpc_RoomInfo>
  /// チャットルーム情報取得
  func getRoomInfo(request: HelloGrpc_RoomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<HelloGrpc_RoomInfo>
  /// チャットルーム一覧取得
  func getRooms(request: HelloGrpc_Null, context: StatusOnlyCallContext) -> EventLoopFuture<HelloGrpc_RoomList>
  /// Client-side streamingを用いてメッセージを交換する
  func sendMessage(context: UnaryResponseCallContext<HelloGrpc_SendResult>) -> EventLoopFuture<(StreamEvent<HelloGrpc_SendRequest>) -> Void>
  /// Server-side streamingを用いてメッセージを交換する
  func getMessages(request: HelloGrpc_MessagesRequest, context: StreamingResponseCallContext<HelloGrpc_Message>) -> EventLoopFuture<GRPCStatus>
  func sendImage(context: UnaryResponseCallContext<HelloGrpc_SendResult>) -> EventLoopFuture<(StreamEvent<HelloGrpc_SendImageRequest>) -> Void>
  func getImage(request: HelloGrpc_ImagesRequest, context: StreamingResponseCallContext<HelloGrpc_Image>) -> EventLoopFuture<GRPCStatus>
}

extension HelloGrpc_HelloGrpcProvider {
  internal var serviceName: Substring { return "HelloGrpc.HelloGrpc" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GreetServer":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.greetServer(request: request, context: context)
        }
      }

    case "AddRoom":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addRoom(request: request, context: context)
        }
      }

    case "GetRoomInfo":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getRoomInfo(request: request, context: context)
        }
      }

    case "GetRooms":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getRooms(request: request, context: context)
        }
      }

    case "SendMessage":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.sendMessage(context: context)
      }

    case "GetMessages":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getMessages(request: request, context: context)
        }
      }

    case "SendImage":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.sendImage(context: context)
      }

    case "GetImage":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getImage(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

